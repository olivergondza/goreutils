#!/bin/awk -f

# TODO
# - Exit code ranges
# - Output verification by command
# - Providing standard input

# Populate config argument with tool configuration
function init_opts(config, argc, argv) {
  for (i = 1; i < argc; i++) {
    switch (argv[i]) {
      case "--message":
        read_opt_value(config, argv, ++i, CNF_MESSAGE, "--message")
      break;
      case "--exit-with":
        read_opt_value(config, argv, ++i, CNF_EXIT, "--exit-with")
      break;
      case "--succeeds":
        config[CNF_EXIT] = 0
      break;
      case "--succeeds-silently":
        config[CNF_EXIT] = 0
        config[CNF_STDOUT] = REGEX_EMPTY
        config[CNF_STDERR] = REGEX_EMPTY
      break;
      case "--stdout-matches":
        read_opt_value(config, argv, ++i, CNF_STDOUT, "--stdout-matches")
      break;
      case "--no-stdout":
        config[CNF_STDOUT] = REGEX_EMPTY
      break;
      case "--stderr-matches":
        read_opt_value(config, argv, ++i, CNF_STDERR, "--stderr-matches")
      break;
      case "--no-stderr":
        config[CNF_STDERR] = REGEX_EMPTY
      break;
      case "--running":
        read_opt_value(config, argv, ++i, CNF_COMMAND, "--running")
        prepare_exec(config[CNF_COMMAND], config_running_exec)
      break
      default:
        print "Unknown option "argv[i]" given" > "/dev/stderr"
      break;
    }
  }

  # Print config
  # for (key in config) {
  #   print key": "config[key]
  # }

  if (!(CNF_COMMAND in config)) {
    print "No operation specified. Use --running" > "/dev/stderr"
    exit EXIT_USAGE
  }
}

function read_opt_value(config, argv, value_index, cnf_name, arg_name) {
  if (length(argv) <= value_index) {
    print "Option "arg_name" given with no value" > "/dev/stderr"
    exit EXIT_USAGE
  }
  config[cnf_name] = argv[value_index]
}

# Turn the command specifier into a shell call to run and capture stuff
function prepare_exec(command_specifier, exec_array) {
  new_array(exec_array)
  token = "assert-exec-"(1000000*rand())
  exec_array["stdout"] = "/tmp/assert-exec-"token"-stdout"
  exec_array["stderr"] = "/tmp/assert-exec-"token"-stderr"

  split(command_specifier, chunks, ",")
  command = "exec"
  for(ii = 1; ii <= length(chunks); ii++) {
    arg = chunks[ii]
    gsub(/[']/, "'\\''", arg)
    command = command" '"arg"'"
  }
  command = command" > '"exec_array["stdout"]"' 2> '"exec_array["stderr"]"'"
  exec_array["command"] = command
  # print command
}

function new_array(array) {
  split("", array)
}

BEGIN {
  EXIT_SUCCESS = 0
  EXIT_USAGE = 1
  EXIT_FAILURE = 2

  CNF_MESSAGE="message"
  CNF_STDOUT="stdout"
  CNF_STDERR="stderr"
  CNF_EXIT="exit"
  CNF_COMMAND="command"

  REGEX_EMPTY="^$"

  srand() # We use rand() down the path
  RS="^$" # So we can read whole files easily

  # Tool configuration provided
  new_array(config)
  # ExecArray for main execution task (--running)
  new_array(config_running_exec)
  # Map of problems detected
  new_array(assertions)

  init_opts(config, ARGC, ARGV)

  exit_code = system(config_running_exec["command"])
  if (CNF_EXIT in config && exit_code != config[CNF_EXIT]) {
    assertions["exit"] = ("ASSERT: Exit code mismatch. Expected "config[CNF_EXIT]", was "exit_code)
  }

  if (CNF_STDOUT in config) {
    getline out < (config_running_exec["stdout"])
    if (out !~ config[CNF_STDOUT]) {
      assertions["stdout"] = ("ASSERT: Standard output mismatch. Expected text matching '"config[CNF_STDOUT]"', was:\n"out"ASSERT: ===")
    }
  }
  system("rm '"config_running_exec["stdout"]"'")

  if (CNF_STDERR in config) {
    getline err < (config_running_exec["stderr"])
    if (err !~ config[CNF_STDERR]) {
      assertions["stderr"] = ("ASSERT: Standard error mismatch. Expected text matching '"config[CNF_STDERR]"', was:\n"err"ASSERT: ===")
    }
  }
  system("rm '"config_running_exec["stderr"]"'")

  for (key in assertions) {
    print assertions[key] > "/dev/stderr"
  }

  # Exiting explicitly to prevent AWK to process arguments as input files
  exit (length(assertions) == 0) ? EXIT_SUCCESS : EXIT_FAILURE
}
