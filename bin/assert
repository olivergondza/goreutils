#!/bin/awk -f

# TODO
# - Indent assertions report
# - Repeatable same checks
# - --running-shell instead of commands
#   - or running executable file?
# - Output (colored) diffing
# - Output match trailing newline
# - Exit code ranges
# - Output verification by command
# - Providing standard input to command
# - Decide whether go for gawk only or consider compatibility with other impls
#   - https://en.wikipedia.org/wiki/AWK#Versions_and_implementations
# - Add suite support

function usage() {
  print "Usage: assert [OPTIONS]" > "/dev/stderr"
  print "" > "/dev/stderr"
  print "Command specification:" > "/dev/stderr"
  print "    --running EXEC-LIST      Command arguments to run" > "/dev/stderr"
  print "" > "/dev/stderr"
  print "Validation:" > "/dev/stderr"
  print "    --exit-with N            Expected exit code" > "/dev/stderr"
  print "    --no-stdout              No stdout expected" > "/dev/stderr"
  print "    --no-stderr              No stderr expected" > "/dev/stderr"
  print "    --stdout-matches REGEX   Expected stdout" > "/dev/stderr"
  print "    --stderr-matches REGEX   Expected stderr" > "/dev/stderr"
  print "    --succeeds               Exit with 0 code without stderr" > "/dev/stderr"
  print "    --succeeds-silently      Exit with 0 code without stderr or stdout" > "/dev/stderr"
  print "" > "/dev/stderr"
  print "Other options:" > "/dev/stderr"
  print "    --message DESCRIPTION    Test description" > "/dev/stderr"
  exit EXIT_USAGE
}

# Populate config argument with tool configuration
function init_opts(config, argc, argv) {
  if (argc == 1) {
    print "Verify outcome of command run" > "/dev/stderr"
    print "" > "/dev/stderr"
    usage()
  }
  for (i = 1; i < argc; i++) {
    switch (argv[i]) {
      case "--message":
        read_opt_value(config, argv, ++i, CNF_MESSAGE, "--message")
      break;
      case "--exit-with":
        read_opt_value(config, argv, ++i, CNF_EXIT, "--exit-with")
      break;
      case "--succeeds":
        config[CNF_EXIT] = 0
        config[CNF_STDERR_MATCHES] = REGEX_EMPTY
      break;
      case "--succeeds-silently":
        config[CNF_EXIT] = 0
        config[CNF_STDOUT_MATCHES] = REGEX_EMPTY
        config[CNF_STDERR_MATCHES] = REGEX_EMPTY
      break;
      case "--stdout-equals":
        read_opt_value(config, argv, ++i, CNF_STDOUT_EQUALS, "--stdout-equals")
      break;
      case "--stdout-equals-file":
        read_opt_value(config, argv, ++i, CNF_STDOUT_EQUALS_FILE, "--stdout-equals-file")
      break;
      case "--stdout-matches":
        read_opt_value(config, argv, ++i, CNF_STDOUT_MATCHES, "--stdout-matches")
      break;
      case "--no-stdout":
        config[CNF_STDOUT_MATCHES] = REGEX_EMPTY
      break;
      case "--stderr-equals":
        read_opt_value(config, argv, ++i, CNF_STDERR_EQUALS, "--stderr-equals")
      break;
      case "--stderr-equals-file":
        read_opt_value(config, argv, ++i, CNF_STDERR_EQUALS_FILE, "--stderr-equals-file")
      break;
      case "--stderr-matches":
        read_opt_value(config, argv, ++i, CNF_STDERR_MATCHES, "--stderr-matches")
      break;
      case "--no-stderr":
        config[CNF_STDERR_MATCHES] = REGEX_EMPTY
      break;
      case "--running":
        read_opt_value(config, argv, ++i, CNF_COMMAND, "--running")
        prepare_exec(config[CNF_COMMAND], config_running_exec)
      break
      default:
        print "Unknown option "argv[i]" given" > "/dev/stderr"
        usage()
      break;
    }
  }

  # Print config
  # for (key in config) {
  #   print key": "config[key]
  # }

  if (!(CNF_COMMAND in config)) {
    print "No operation specified. Use --running" > "/dev/stderr"
    usage()
  }
}

function read_opt_value(config, argv, value_index, cnf_name, arg_name) {
  if (length(argv) <= value_index) {
    print "Option "arg_name" given with no value" > "/dev/stderr"
    usage()
  }
  config[cnf_name] = argv[value_index]
}

# Turn the command specifier into a shell call to run and capture stuff
function prepare_exec(command_specifier, exec_array) {
  new_array(exec_array)
  token = "assert-exec-"(1000000*rand())
  exec_array["stdout"] = "/tmp/assert-exec-"token"-stdout"
  exec_array["stderr"] = "/tmp/assert-exec-"token"-stderr"

  COMMA_SUBSTITUTE="string_never_to_be_found_in_real_input_to_be_used_to_temporarily_hide_quoted_commas_before_splitting"
  gsub(/\\,/, COMMA_SUBSTITUTE, command_specifier)
  split(command_specifier, chunks, ",")
  # Explicitly use empty stdin not to inherit the one from assert itself
  # Otherwise input reading command will halt the execution
  command = ": | exec"
  show_command = ""
  for(ii = 1; ii <= length(chunks); ii++) {
    arg = chunks[ii]
    gsub(COMMA_SUBSTITUTE, ",", arg)
    gsub(/[']/, "'\\''", arg)
    command = command" '"arg"'"
    show_command = show_command"'"arg"' "
  }
  command = command" > '"exec_array["stdout"]"' 2> '"exec_array["stderr"]"'"
  exec_array["command"] = command
  gsub(/[ ]$/, "", show_command) # Remove trailing space
  exec_array["show_command"] = show_command
}

function new_array(array) {
  split("", array)
}

BEGIN {
  EXIT_SUCCESS = 0
  EXIT_USAGE = 1
  EXIT_FAILURE = 2

  CNF_MESSAGE="message"
  CNF_STDOUT_EQUALS="stdout-equals"
  CNF_STDOUT_EQUALS_FILE="stdout-equals-file"
  CNF_STDOUT_MATCHES="stdout-matches"
  CNF_STDERR_EQUALS="stderr-equals"
  CNF_STDERR_EQUALS_FILE="stderr-equals-file"
  CNF_STDERR_MATCHES="stderr-matches"
  CNF_EXIT="exit"
  CNF_COMMAND="command"

  REGEX_EMPTY="^$"

  # We use rand() down the path so initializing it now. Second resolution of systime()
  # is not sufficient to prevent consecutive invocations of assert to clash on random paths generated
  srand(systime()*PROCINFO["pid"])
  RS="^$" # So we can read whole files easily

  # Tool configuration provided
  new_array(config)
  # ExecArray for main execution task (--running)
  new_array(config_running_exec)
  # Map of problems detected
  new_array(assertions)

  init_opts(config, ARGC, ARGV)

  exit_code = system(config_running_exec["command"])

  verify_outcomes(exit_code)
  report_results()
}

function verify_outcomes(exit_code) {
  if (CNF_EXIT in config && exit_code != config[CNF_EXIT]) {
    push(assertions, "Exit code mismatch. Expected "config[CNF_EXIT]", was "exit_code)
  }

  if (or(CNF_STDOUT_MATCHES in config, CNF_STDOUT_EQUALS in config, CNF_STDOUT_EQUALS_FILE in config)) {
    getline actual_out < (config_running_exec["stdout"])
    if (CNF_STDOUT_EQUALS in config && actual_out != config[CNF_STDOUT_EQUALS]) {
      push(assertions, "Expected stdout: '"config[CNF_STDOUT_EQUALS]"', was:\n    "actual_out)
    }

    if (CNF_STDOUT_EQUALS_FILE in config) {
      getline expected < (config[CNF_STDOUT_EQUALS_FILE])
      if (expected != actual_out) { # TODO no need to compare in memory
        push(assertions, "Expected stdout: '"expected"', was:\n    "actual_out)
      }
    }

    if (CNF_STDOUT_MATCHES in config && actual_out !~ config[CNF_STDOUT_MATCHES]) {
      push(assertions, "Expected stdout matching '"config[CNF_STDOUT_MATCHES]"', was:\n    "actual_out)
    }
  }
  system("rm -f '"config_running_exec["stdout"]"'")

  if (CNF_STDERR_MATCHES in config || CNF_STDERR_EQUALS in config || CNF_STDOUT_EQUALS_FILE in config) {
    getline actual_err < (config_running_exec["stderr"])

    if (CNF_STDERR_EQUALS in config && actual_err != config[CNF_STDERR_EQUALS]) {
      push(assertions, "Expected stderr: '"config[CNF_STDERR_EQUALS]"', was:\n    "actual_err)
    }

    if (CNF_STDERR_MATCHES in config && actual_err !~ config[CNF_STDERR_MATCHES]) {
      push(assertions, "Expected stderr matching '"config[CNF_STDERR_MATCHES]"', was:\n    "actual_err)
    }
  }
  system("rm -f '"config_running_exec["stderr"]"'")
}

function push(array, element) {
  array[length(array)+1] = element
}

function report_results() {
  if (length(assertions) == 0) exit EXIT_SUCCESS

  print "ASSERT: Failed running: "config_running_exec["show_command"]  > "/dev/stderr"
  for (key in assertions) {
    print "  - "assertions[key] > "/dev/stderr"
  }

  exit EXIT_FAILURE
}
