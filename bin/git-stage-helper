#!/usr/bin/env bash
# Inspired by https://disconnected.systems/blog/another-bash-strict-mode/
set -uo pipefail
trap 's=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# ' ' = unmodified
# M   = modified
# A   = added
# D   = deleted
# R   = renamed
# C   = copied
# U   = updated but unmerged
# Index   WorkTree Meaning
# -------------------------------------------------
#          [AMD]   not updated
# M        [ MD]   updated in index
# A        [ MD]   added to index
# D                deleted from index
# R        [ MD]   renamed in index
# C        [ MD]   copied in index
# [MARC]           index and work tree matches
# [ MARC]     M    work tree changed since index
# [ MARC]     D    deleted in work tree
# [ D]        R    renamed in work tree
# [ D]        C    copied in work tree
# -------------------------------------------------
# D           D    unmerged, both deleted
# A           U    unmerged, added by us
# U           D    unmerged, deleted by them
# U           A    unmerged, added by them
# D           U    unmerged, deleted by us
# A           A    unmerged, both added
# U           U    unmerged, both modified
# -------------------------------------------------
# ?           ?    untracked
# !           !    ignored
# -------------------------------------------------
STATUS_FOR_REVIEW="s/^([ ARM]M|[?][?]|UU) (.* -> )?//p"

SED_INDENT="s/^/    /"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

# Change directory for the script to the repo root so all repo-relative file paths
# identified by git status --short --porcelain get resolved correctly
cd "$(git rev-parse --show-toplevel)"

function is_skipped() {
  for i in "${skipped_files[@]}"
  do
    if [ "$i" == "$1" ] ; then
        return 0
    fi
  done
  return 1
}

function execute_diff() {
  reference="$1"
  diff_opts=$2

  git --no-pager -c color.ui=always diff $diff_opts $reference "${dirty_files[0]}" | sed "$SED_INDENT"
  # The diff is empty for untracked files so forcing full diff in that case
  if git status --short --porcelain "${dirty_files[0]}" | grep '^[?][?] ' > /dev/null; then
    src_path=/dev/null
    if [ -d "${dirty_files[0]}" ]; then
      src_path=/tmp/gitadd-empty
      rm -rf "$src_path"
      mkdir "$src_path"
    fi
    git --no-pager -c color.ui=always diff --no-index $diff_opts -- "$src_path" "${dirty_files[0]}" | sed "$SED_INDENT" || true
  fi
  show_status=0
}

show_status=1
skipped_files=()
while :; do
  if [ $show_status -eq 1 ]; then
    git -c color.ui=always status | sed "$SED_INDENT"
  fi
  show_status=1

  dirty_files=()
  while read filename; do
    if [ ! "$filename" == "" ]; then # Empty output has one empty line
      if ! is_skipped "$filename"; then
        dirty_files+=("$filename")
      fi
    fi
  done <<< "$(git status --short --porcelain | sed -nr "$STATUS_FOR_REVIEW")"

  if [ ${#dirty_files[@]} -eq 0 ]; then
    echo "Done"
    for i in "${skipped_files[@]}"; do
      echo "Skipped $i"
    done
    exit 0
  fi

  echo ""
  echo "Next "${dirty_files[0]}""
  echo ": [d]iff, [w]s diff, [h]ead diff, [r]eview"
  echo ": [a]dd, [p]atch, [m]ergetool, [c]ommit, [s]kip, [q]uit"

  if ! read -n1 ans; then
    # When stdin is closed - not interactive invocation
    echo >&2 "STDIN is closed"
    exit 1
  fi
  echo ""
  case "$ans" in
    d) # diff
      execute_diff "" ""
    ;;
    w) # whitespace diff
      execute_diff "" "-w"
    ;;
    h) # head diff
      execute_diff "HEAD" ""
    ;;
    r) # review
      git -c color.ui=always diff --staged
    ;;
    a) # add
      git add "${dirty_files[0]}"
    ;;
    p) # patch
      git add -ip "${dirty_files[0]}"
    ;;
    m) # merge
      git mergetool --no-prompt
    ;;
    c) # commit
      git commit
    ;;
    s) # skip
      skipped_files+=("${dirty_files[0]}")
    ;;
    q) # quit
      exit 0
    ;;
  esac
done
